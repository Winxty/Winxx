local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

-- Old name == "Catgirlware (⸝⸝๑﹏๑⸝⸝)"

local function gr()
    local bp = game.Players.LocalPlayer.Backpack
    local char = game.Players.LocalPlayer.Character


    for i, v in pairs(bp:GetChildren()) do
        if v.Name:find("Rod") then
            return v
        end
    end


    if char then
        for i, v in pairs(char:GetChildren()) do
            if v.Name:find("Rod") then
                return v
            end
        end
    end

    return nil
end

local function cast(rod, power)
    local args = {
        [1] = power,
        [2] = 1
    }
    
    game:GetService("Players").LocalPlayer.Character:FindFirstChild(rod).events.cast:FireServer(unpack(args))
end

local AutoFish = true
local AutoFishEnabled = false
local autoShakeDelay = 0.05

local VirtualInputManager = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")
local Players = game:GetService("Players")

function AutoShake()
    while AutoFish do
        if not AutoFishEnabled then
            task.wait(1)
            continue
        end

        local PlayerGUI = Players.LocalPlayer:WaitForChild("PlayerGui")
        local shakeUI = PlayerGUI:FindFirstChild("shakeui")
        
        if shakeUI and shakeUI.Enabled then
            local safezone = shakeUI:FindFirstChild("safezone")
            if safezone then
                local button = safezone:FindFirstChild("button")
                if button and button:IsA("ImageButton") and button.Visible then
                    GuiService.SelectedObject = button
                    
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                end
            end
        end
        
        task.wait(autoShakeDelay)
    end
end


task.spawn(function()
    while AutoFish do
        if AutoFishEnabled then
            AutoShake()
        end
        task.wait(1)
    end
end)

local function reel(trueorfalse)
    local args = {
        [1] = 100,
        [2] = trueorfalse
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("reelfinished "):FireServer(unpack(args))    
end

local function reelsafe()
    local playergui = game.Players.LocalPlayer.PlayerGui

	local reel = playergui:WaitForChild("reel")
	local bar = reel:FindFirstChild("bar"):FindFirstChild("playerbar")
	bar.Size = UDim2.new(1, 0, 1.3, 0)
end



if game.CoreGui:FindFirstChild("CatgirlLoverz") then
    cgwc = game.CoreGui.Catgirlware
    cgwc:Destroy()
    print("cgwc-")
else
print("cgwc+")
end


local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()

local noclipConnection
local originalCollision = {}
function noclip()
    if noclipConnection then return end
    for _, part in ipairs(char:GetDescendants()) do
        if part:IsA("BasePart") then
            originalCollision[part] = part.CanCollide
        end
    end
    noclipConnection = RunService.Stepped:Connect(function()
        for _, part in ipairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end)
end


function clip()
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    for part, wasCollidable in pairs(originalCollision) do
        if part and part:IsA("BasePart") then
            part.CanCollide = wasCollidable
        end
    end
    originalCollision = {}
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Aurorial.lol",
    SubTitle = "[BETA] Discord.gg/ZeubAHnGy9",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.K
})


local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Config = Window:AddTab({ Title = "Config", Icon = "cog" }),
    Zone = Window:AddTab({ Title = "Zone Fishing", Icon = "flag" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
local CC

local castpower = 60
local perfcatch = false
local fastcatch = false

    local Toggle = Tabs.Main:AddToggle("MyToggle", 
    {
        Title = "Auto Cast", 
        Description = "",
        Default = false,
        Callback = function(state)
            if state then
                local c = game.Players.LocalPlayer.Character
                local rod = gr()
                CC = game:GetService("RunService").RenderStepped:Connect(function()
                    if rod.Parent == c then
                        local vals = rod:FindFirstChild("values")
                        if vals and vals:FindFirstChild("casted") then
                            if vals.casted.Value == false then
                                cast(rod.Name, castpower)
                            end
                        end
                    end
                    task.wait(0.5)
                end)
            else
                if CC then
                    CC:Disconnect()
                    CC = nil
                end
            end
        end
    })

    local Toggle = Tabs.Main:AddToggle("MyToggle", 
    {
        Title = "Auto Shake", 
        Description = "",
        Default = false,
        Callback = function(state)
            if state then
                AutoFishEnabled = true
            else
                AutoFishEnabled = false
            end
        end 
    })

    local RC

    local Toggle = Tabs.Main:AddToggle("MyToggle", 
    {
        Title = "Auto Reel", 
        Description = "",
        Default = false,
        Callback = function(state)
            if state then
                local c = game.Players.LocalPlayer.Character
                local rod = gr()
                local vals = rod:FindFirstChild("values")
                if vals:FindFirstChild("bite") then

                    if RC then
                        RC:Disconnect() 
                    end
                    
                    RC = game:GetService("RunService").RenderStepped:Connect(function()

                        repeat task.wait() until vals.bite.Value == true

                        if fastcatch == true then
                            if perfcatcgh == true then
                                reel(true)
                            else
                                reel(false)
                            end
                        else
                            reelsafe()
                            repeat task.wait() until vals.Bite.Value == false
                        end
                    end)
                end
            else
                if RC then
                    RC:Disconnect()
                    RC = nil
                end
            end
        end
    })
    
    
    
Tabs.Config:AddSection("Casting")

local Slider = Tabs.Config:AddSlider("Slider", 
{
    Title = "Cast Power",
    Description = "",
    Default = 60,
    Min = 0,
    Max = 100,
    Rounding = 1,
    Callback = function(Value)
        castpower = Value
    end
})

Tabs.Config:AddSection("Shaking")

local Slider = Tabs.Config:AddSlider("Slider", 
{
    Title = "Shake Delay",
    Description = "",
    Default = 0.05,
    Min = 0.01,
    Max = 5,
    Rounding = 2,
    Callback = function(Value)
        autoShakeDelay = Value
    end
})

Tabs.Config:AddSection("Reeling")

local Toggle = Tabs.Config:AddToggle("MyToggle", 
{
    Title = "Fast Catch", 
    Description = "Kick risk cus i dont have obfuscation yet",
    Default = false,
    Callback = function(state)
	if state then
	    fastcatch = true
        else
        fastcatch = false
        end
    end 
})

local Toggle = Tabs.Config:AddToggle("MyToggle", 
{
    Title = "Always Perfect Catch", 
    Description = "Only works with Fast Catch",
    Default = false,
    Callback = function(state)
	if state then
	    perfcatcgh = true
        else
        perfcatcgh = false
        end
    end 
})

Tabs.Config:AddSection("Misc")

local watereffectblock 

local Toggle = Tabs.Config:AddToggle("MyToggle", 
{
    Title = "Disable Water effects", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then
	    local lighting = game:GetService("Lighting")
        watereffectblock = game:GetService("RunService").RenderStepped:Connect(function()
            local underbl = lighting:FindFirstChild("underwaterbl")
            local undercc = lighting:FindFirstChild("underwatercc")
                if undercc.Enabled == true and underbl.Enabled == true then
                    undercc.Enabled = false
                    underbl.Enabled = false
                end
        end)
	else 
            if watereffectblock then
                watereffectblock:Disconnect()
                watereffectblock = nil
            end
        end
    end 
})

local gamerun

local Toggle = Tabs.Config:AddToggle("MyToggle", 
{
    Title = "Better preformance", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then
        gamerun = game:GetService("RunService").RenderStepped:Connect(function()
                
            game:GetService("RunService"):Set3dRenderingEnabled(true)
            game:GetService("RunService"):SetRobloxGuiFocused(false)
            
        end)
    else
        if gamerun then
            gamerun:Disconnect()
                gamerun = nil
            end
        end
    end 
})


    local zones = {
        ["Moosewood pond"] = "546, 127, 320",
        ["The Depths"] = "981, -755, 1361",
        ["Calm Zone"] = "-4171, -11314, 3827",
        ["Forsaken Veil"] = "-2384, -11368, 6992",
        ["Abyssal Zenith"] = "-14061, -11063, -108",
        ["Challengers Deep"] = "813, -3407, -1624",
        ["Volcanic Vents"] = "-3115, -2091, 4073",
        ["Forsaken Shores Pond"] = "-2691, 134, 1741",
        ["Forsaken Shores Ocean"] = "-3060, 103, 1453",
        ["Atlantean Storm"] = "-3652, -91, 767",
        ["Grand Reef"] = "-3564, -83, 537",
        ["Sunstone"] = "-890, 99, -1269",
        ["Ancient Isle Pond"] = "6016, 156, 339",
        ["Ancient Isle Ocean"] = "5900, 104, 457"
    }

    local Eventzones = {
        ["Animal Pool"] = game.Workspace.zones.fishing:FindFirstChild("Animal Pool"),
    }
    
    local SelectedZone = "Moosewood pond"
    

    local dropdownValues = {}
    for zoneName, _ in pairs(zones) do
        table.insert(dropdownValues, zoneName)
    end


    local zonefishing
    local oldpos
    
    local Toggle = Tabs.Zone:AddToggle("MyToggle", 
    {
        Title = "Zone Fishing", 
        Description = "",
        Default = false,
        Callback = function(state)
            if state then
                oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                local zone = SelectedZone
                local coords = zones[zone]
                

                local x, y, z = string.match(coords, "([^,]+),%s*([^,]+),%s*([^,]+)")
                x, y, z = tonumber(x), tonumber(y), tonumber(z)


                if x and y and z then
                    noclip()
                    zonefishing = game:GetService("RunService").RenderStepped:Connect(function()
                        local rod = gr()
                        local bobber = rod:FindFirstChild("bobber")
                        if bobber then
                            if SelectedZone == "Moosewood pond" or SelectedZone == "Calm Zone" or SelectedZone == "Forsaken Veil" or SelectedZone == "Challengers Deep" 
                            or SelectedZone == "Volcanic Vents" or SelectedZone == "Forsaken Shores Pond" or SelectedZone == "Atlantean Storm" or SelectedZone == "Grand Reef" 
                            or SelectedZone == "" then -- Normal ups


                                bobber.Position = Vector3.new(x, y + 5, z)
                                local bobmod = bobber:FindFirstChildOfClass("Model")
                                    for i, v in pairs(bobmod:GetChildren()) do
                                        if v:IsA("MeshPart") then
                                            v.Position = Vector3.new(x, y + 5, z)
                                        end
                                    end


                            elseif SelectedZone == "The Depths" or SelectedZone == "Forsaken Shores Ocean" or SelectedZone == "Sunstone" or SelectedZone == "Ancient Isle Ocean" 
                            or SelectedZone == "Abyssal Zenith" then -- Normal Downs


                                bobber.Position = Vector3.new(x, y - 5, z)
                                local bobmod = bobber:FindFirstChildOfClass("Model")
                                for i, v in pairs(bobmod:GetChildren()) do
                                    if v:IsA("MeshPart") then
                                        v.Position = Vector3.new(x, y - 5, z)
                                    end
                                end


                            elseif SelectedZone == "Ancient Isle Pond" then -- Specials


                                bobber.Position = Vector3.new(x, y + 15, z)
                                local bobmod = bobber:FindFirstChildOfClass("Model")
                                    for i, v in pairs(bobmod:GetChildren()) do
                                        if v:IsA("MeshPart") then
                                            v.Position = Vector3.new(x, y + 15, z)
                                        end
                                    end
                            end
                        end
                        game.Workspace.Gravity = 0
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(x, y, z)
                        game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
                    end)
                
            else

        end
            else
                if zonefishing then
                    zonefishing:Disconnect()
                    zonefishing = nil
                end
                game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                game.Workspace.Gravity = 196.2
                clip()
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(oldpos)
            end
        end 
    })
    
    
    local Zones = Tabs.Zone:AddDropdown("Dropdown", {
        Title = "Choose Zone",
        Description = "",
        Values = dropdownValues,
        Multi = false,
        Default = "Moosewood pond",
    })
    
    Zones:OnChanged(function(Value)
        SelectedZone = Value
        print("Zone changed to: " .. SelectedZone)
    end)



    
  







SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)


SaveManager:LoadAutoloadConfig()


end

